package com.tuxskar.caluma;import android.app.ActionBar;import android.app.Activity;import android.app.Fragment;import android.app.FragmentManager;import android.app.FragmentTransaction;import android.content.ContentResolver;import android.content.ContentValues;import android.content.Context;import android.content.SharedPreferences;import android.net.Uri;import android.os.Bundle;import android.provider.CalendarContract.Events;import android.support.v13.app.FragmentPagerAdapter;import android.support.v4.view.ViewPager;import android.util.Log;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.AdapterView.OnItemSelectedListener;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.Spinner;import android.widget.Toast;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import com.tuxskar.caluma.gcm.models.SentMessageInfo;import com.tuxskar.caluma.gcm.models.SentMessageToSubject;import com.tuxskar.caluma.ws.MessageToSubject;import com.tuxskar.caluma.ws.WSErrorHandler;import com.tuxskar.caluma.ws.WSHandler;import com.tuxskar.caluma.ws.models.Degree;import com.tuxskar.caluma.ws.models.School;import com.tuxskar.caluma.ws.models.SimpleInfo;import com.tuxskar.caluma.ws.models.SubjectSimple;import com.tuxskar.caluma.ws.models.SubjectsSubscribed;import com.tuxskar.caluma.ws.models.WSInfo;import java.util.ArrayList;import java.util.Calendar;import java.util.List;import java.util.Locale;import java.util.Map;import retrofit.Callback;import retrofit.RestAdapter;import retrofit.RetrofitError;import retrofit.client.Response;import retrofit.converter.GsonConverter;public class TeacherHomeActivity extends Activity implements        ActionBar.TabListener {    /**     * The {@link android.support.v4.view.PagerAdapter} that will provide     * fragments for each of the sections. We use a {@link FragmentPagerAdapter}     * derivative, which will keep every loaded fragment in memory. If this     * becomes too memory intensive, it may be best to switch to a     * {@link android.support.v13.app.FragmentStatePagerAdapter}.     */    SectionsPagerAdapter mSectionsPagerAdapter;    /**     * The {@link ViewPager} that will host the section contents.     */    ViewPager mViewPager;    static SharedDB sharedDB;    static Map<Long, ArrayList<Long>> tsubjectsIds;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        sharedDB = new SharedDB(this.getApplicationContext());        // Set up the action bar.        final ActionBar actionBar = getActionBar();        if (actionBar != null) {            actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);        }        mSectionsPagerAdapter = new SectionsPagerAdapter(getFragmentManager());        mViewPager = (ViewPager) findViewById(R.id.pager);        mViewPager.setAdapter(mSectionsPagerAdapter);        mViewPager                .setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {                    @Override                    public void onPageSelected(int position) {                        if (actionBar != null) {                            actionBar.setSelectedNavigationItem(position);                        }                    }                });        for (int i = 0; i < mSectionsPagerAdapter.getCount(); i++) {            if (actionBar != null) {                actionBar.addTab(actionBar.newTab()                        .setText(mSectionsPagerAdapter.getPageTitle(i))                        .setTabListener(this));            }        }    }    @Override    protected void onStop() {        sharedDB.putIDMap(getString(R.string.TSUBJECTIDS), tsubjectsIds);        super.onStop();    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.main, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        return id == R.id.action_settings || super.onOptionsItemSelected(item);    }    @Override    public void onTabSelected(ActionBar.Tab tab,                              FragmentTransaction fragmentTransaction) {        mViewPager.setCurrentItem(tab.getPosition());    }    @Override    public void onTabUnselected(ActionBar.Tab tab,                                FragmentTransaction fragmentTransaction) {    }    @Override    public void onTabReselected(ActionBar.Tab tab,                                FragmentTransaction fragmentTransaction) {    }    public static void addEventCorrect(String title, Calendar start,                                       Calendar end, String description, String rrule, String location,                                       Context context, long tSubjectId) {        SharedPreferences sharedPref = context.getSharedPreferences(                context.getString(R.string.calendarPreferences),                Context.MODE_PRIVATE);        long calID = sharedPref.getLong(                context.getString(R.string.selectedCalendarId), 1);        long startMillis;        long endMillis;        startMillis = start.getTimeInMillis();        endMillis = end.getTimeInMillis();        ContentResolver cr = context.getContentResolver();        ContentValues values = new ContentValues();        values.put(Events.DTSTART, startMillis);        values.put(Events.DTEND, endMillis);        values.put(Events.RRULE, rrule);        values.put(Events.TITLE, title);        values.put(Events.DESCRIPTION, description);        values.put(Events.EVENT_LOCATION, location);        values.put(Events.CALENDAR_ID, calID);        values.put(Events.EVENT_TIMEZONE, "Europe/Madrid");        Uri uri = cr.insert(Events.CONTENT_URI, values);        Long eventId = Long.parseLong(uri.getLastPathSegment());        // Toast.makeText(context,        // "Created Calendar Event " + eventID + " CalId: " +        // Long.toString(calID), Toast.LENGTH_SHORT).show();        TeacherHomeActivity.sharedDB.saveID(tSubjectId, eventId);    }    public static int deleteEventId(Context context, Long tSubjectId) {        int deleted = 0;        for (Long eventId : TeacherHomeActivity.sharedDB                .getEventIds(tSubjectId)) {            deleted += context.getContentResolver().delete(Events.CONTENT_URI,                    Events._ID + " = " + Long.toString(eventId), null);        }        TeacherHomeActivity.sharedDB.removeTSubject(tSubjectId);        return deleted;    }    /**     * A {@link FragmentPagerAdapter} that returns a fragment corresponding to     * one of the sections/tabs/pages.     */    public class SectionsPagerAdapter extends FragmentPagerAdapter {        public SectionsPagerAdapter(FragmentManager fm) {            super(fm);        }        @Override        public Fragment getItem(int position) {            switch (position) {                case 0:                    return SubjectsSearcherFragment.newInstance(position);                default:                    return new MessagesTab().newInstance(position + 1, true, null);            }        }        @Override        public int getCount() {            return 2;        }        @Override        public CharSequence getPageTitle(int position) {            Locale l = Locale.getDefault();            switch (position) {                case 0:                    return getString(R.string.title_section1).toUpperCase(l);                case 1:                    return getString(R.string.title_section2).toUpperCase(l);            }            return null;        }    }    /**     * A placeholder fragment containing a simple view.     */    public static class SubjectsSearcherFragment extends Fragment {        /**         * The fragment argument representing the section number for this         * fragment.         */        View rootV;        private WSInfo<School> wsSchool;        private Degree selectedDegree;        private int argSchoolSelected;        private int argDegreeSelected;        Context context;        /**         * Returns a new instance of this fragment for the given section number.         */        public static SubjectsSearcherFragment newInstance(int sectionNumber) {            SubjectsSearcherFragment fragment = new SubjectsSearcherFragment();            return fragment;        }        public SubjectsSearcherFragment() {        }        @Override        public View onCreateView(LayoutInflater inflater, ViewGroup container,                                 Bundle savedInstanceState) {            context = container.getContext();            rootV = inflater.inflate(R.layout.subjects_searcher, container,                    false);            getSchools();            return rootV;        }        public void getSchools() {            LoginActivity.getUserService().listSchoolCB(new Callback<WSInfo<School>>() {                @Override                public void failure(RetrofitError arg0) {                    if (arg0.getCause() != null) {                        Toast.makeText(context,                                "Fail getSchool" + arg0.getCause().toString(),                                Toast.LENGTH_LONG).show();                        Log.e("failure school", arg0.getCause().toString());                    } else {                        Toast.makeText(context,                                "Fail getSchool no Cause" + arg0.toString(),                                Toast.LENGTH_LONG).show();                        Log.e("failure school", arg0.toString());                    }                }                @Override                public void success(WSInfo<School> result, Response arg1) {                    Log.d("success school", result.toString());                    wsSchool = result;                    setSchools();                }            });        }        private void setSchools() {            Spinner schoolSpinner = (Spinner) rootV                    .findViewById(R.id.spinner_schools);            ArrayAdapter<School> dataAdapter = new ArrayAdapter<School>(                    this.getActivity(), android.R.layout.simple_spinner_item,                    wsSchool.getResults());            dataAdapter                    .setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);            schoolSpinner.setAdapter(dataAdapter);            schoolSpinner                    .setOnItemSelectedListener(new OnItemSelectedListener() {                        @Override                        public void onItemSelected(AdapterView<?> arg0,                                                   View arg1, int arg2, long arg3) {                            setDegrees(arg2);                        }                        @Override                        public void onNothingSelected(AdapterView<?> arg0) {                        }                    });        }        private void setDegrees(int schoolSelected) {            argSchoolSelected = schoolSelected;            Spinner degreeSpinner = (Spinner) rootV                    .findViewById(R.id.spinner_degree);            ArrayAdapter<SimpleInfo> dataAdapter = new ArrayAdapter<SimpleInfo>(                    this.getActivity(), android.R.layout.simple_spinner_item,                    wsSchool.getResults().get(argSchoolSelected).getDegrees());            dataAdapter                    .setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);            degreeSpinner                    .setOnItemSelectedListener(new OnItemSelectedListener() {                        @Override                        public void onItemSelected(AdapterView<?> arg0,                                                   View arg1, int arg2, long arg3) {                            argDegreeSelected = arg2;                            getSubjects(wsSchool.getResults()                                    .get(argSchoolSelected).getDegrees()                                    .get(argDegreeSelected).getId());                        }                        @Override                        public void onNothingSelected(AdapterView<?> arg0) {                        }                    });            degreeSpinner.setAdapter(dataAdapter);        }        public void getSubjects(long degreeId) {            LoginActivity.getUserService().getDegree(degreeId, new Callback<Degree>() {                @Override                public void failure(RetrofitError arg0) {                    Log.d("failure degree", arg0.getResponse().toString());                }                @Override                public void success(Degree result, Response arg1) {                    selectedDegree = result;                    populateSubjects();                }            });        }        private void populateSubjects() {            ArrayAdapter<SubjectSimple> adapter = new SubjectArrayAdapter(                    this.getActivity(), selectedDegree.getSubjects());            ListView subjects_list = (ListView) rootV                    .findViewById(R.id.subjects_list);            subjects_list.setAdapter(adapter);        }    }    /**     * A placeholder fragment containing a simple view.     */    public static class MessagesTab extends Fragment {        /**         * The fragment argument representing the section number for this         * fragment.         */        private static final String ARG_SECTION_NUMBER = "section_number";        private static final String CAN_WRITE = "can_send_messages";        private static final String SUBJECT_SELECTED = "subject_selected_id";        private EditText message_input = null;        private ListView messages_list = null;        private Context context;        private View rootView;        private Spinner subjectsSpinner;        private WSInfo<SubjectsSubscribed> wsSubjectsSubscribed;        private int selectedSubjectSubscribed;        private Long selectedSubject = null;        /**         * Returns a new instance of this fragment for the given section number.         */        public MessagesTab newInstance(int sectionNumber, boolean write_enabled, String selectedSubject) {            MessagesTab fragment = new MessagesTab();            int can_write;            if (write_enabled) {                can_write = 1;            } else {                can_write = 0;            }            Bundle args = new Bundle();            args.putInt(ARG_SECTION_NUMBER, sectionNumber);            args.putInt(CAN_WRITE, can_write);            if (selectedSubject != null) {                args.putLong(SUBJECT_SELECTED, Long.parseLong(selectedSubject));            }            fragment.setArguments(args);            return fragment;        }        public MessagesTab() {        }        @Override        public View onCreateView(LayoutInflater inflater, ViewGroup container,                                 Bundle savedInstanceState) {            context = container.getContext();            //context = getActivity().getApplicationContext();            rootView = inflater.inflate(R.layout.sent_message_to_subject, container,                    false);            subjectsSpinner = (Spinner) rootView                    .findViewById(R.id.messages_subject_spinner);            // get subject subscribed by this user            if (getArguments().getInt(CAN_WRITE) == 1) {                message_input = (EditText) rootView.findViewById(R.id.message_input);                Button send_button = (Button) rootView.findViewById(R.id.send_button);                send_button.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        sendMessageToSubject(v);                    }                });            } else {                LinearLayout send_messages_layout = (LinearLayout) rootView.findViewById(R.id.send_messages_layout);                send_messages_layout.removeAllViews();            }            messages_list = (ListView) rootView.findViewById(R.id.messages_list);            if (getArguments().containsKey(SUBJECT_SELECTED)) {                selectedSubject = getArguments().getLong(SUBJECT_SELECTED);            }            return rootView;        }        @Override        public void onResume() {            super.onResume();            getSubscribedSubjects();        }        public void getSubscribedSubjects() {            LoginActivity.getUserService().getSubjectSubscribed(new Callback<WSInfo<SubjectsSubscribed>>() {                @Override                public void failure(RetrofitError arg0) {                    if (arg0.getCause() != null) {                        Toast.makeText(context,                                "Fail getSchool" + arg0.getCause().toString(),                                Toast.LENGTH_LONG).show();                        Log.e("failure school", arg0.getCause().toString());                    } else {                        Toast.makeText(context,                                "Fail getSchool Cause" + arg0.toString(),                                Toast.LENGTH_LONG).show();                        Log.e("failure school", arg0.toString());                    }                }                @Override                public void success(WSInfo<SubjectsSubscribed> result, Response arg1) {                    Log.d("Getting messages", result.toString());                    wsSubjectsSubscribed = result;                    setSubscribedSubjects();                }            });        }        private void setSubscribedSubjects() {            ArrayAdapter<SubjectsSubscribed> dataAdapter = new ArrayAdapter<SubjectsSubscribed>(                    this.getActivity(), android.R.layout.simple_spinner_item,                    wsSubjectsSubscribed.getResults());            dataAdapter                    .setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);            subjectsSpinner.setAdapter(dataAdapter);            subjectsSpinner                    .setOnItemSelectedListener(new OnItemSelectedListener() {                        @Override                        public void onItemSelected(AdapterView<?> arg0,                                                   View arg1, int arg2, long arg3) {                            selectedSubjectSubscribed = arg2;                            getTSubjectMessages(wsSubjectsSubscribed.getResults().get(arg2).getId());                        }                        @Override                        public void onNothingSelected(AdapterView<?> arg0) {                        }                    });            if (selectedSubject != null) {                for (int i = 0; i < subjectsSpinner.getCount(); i++) {                    if (wsSubjectsSubscribed.getResults().get(i).getId() == selectedSubject) {                        subjectsSpinner.setSelection(i);                    }                }            }        }        public void sendMessageToSubject(View view) {            if (message_input != null && message_input.getText().length() > 0) {                Toast.makeText(this.getActivity().getApplicationContext(), "Sending message",                        Toast.LENGTH_SHORT).show();                LoginActivity.getUserService().sendTeacherMessage(new SentMessageToSubject(Long.toString(wsSubjectsSubscribed.getResults().get(selectedSubjectSubscribed).getId()),                        message_input.getText().toString()), new Callback<SentMessageInfo>() {                    @Override                    public void failure(RetrofitError arg0) {                        sentMessageFailure(arg0);                    }                    @Override                    public void success(SentMessageInfo arg0, Response arg1) {                        sentMessageSuccess(arg0);                    }                });            } else {                Toast.makeText(this.getActivity().getApplicationContext(),                        "No empty messages allowed",                        Toast.LENGTH_SHORT).show();            }        }        public void sentMessageSuccess(SentMessageInfo arg0) {            Toast.makeText(this.getActivity().getApplicationContext(),                    "Message sent",                    Toast.LENGTH_SHORT).show();            // TODO: add this new message to the list            message_input.setText("");        }        public void sentMessageFailure(RetrofitError arg0) {            Toast.makeText(this.getActivity().getApplicationContext(),                    "Server not reachable", Toast.LENGTH_SHORT).show();        }        public void setMessages(List<MessageToSubject> messagesList) {            String[] messages = new String[messagesList.size()];            for (int i = 0; i < messagesList.size(); i++) {                messages[i] = messagesList.get(i).getMessage();            }            ArrayAdapter<String> messagesAdapter = new ArrayAdapter<String>(this.context, android.R.layout.simple_list_item_1, messages);            messages_list.setAdapter(messagesAdapter);        }        public void getTSubjectMessages(Long receiver) {            Gson gson = new GsonBuilder()                    .setDateFormat("yyyy-MM-dd'T'HH:mm:ss")                    .create();            RestAdapter restAdapter = new RestAdapter.Builder()                    .setEndpoint(WSHandler.SERVICE_ENDPOINT)                    .setErrorHandler(new WSErrorHandler())                    .setRequestInterceptor(LoginActivity.requestInterceptor)                    .setConverter(new GsonConverter(gson)).build();            WSHandler service = restAdapter.create(WSHandler.class);            service.getAllTeachingSubjectMessages(receiver, new Callback<WSInfo<MessageToSubject>>() {                @Override                public void failure(RetrofitError arg0) {                    if (arg0.getCause() != null) {                        Toast.makeText(context,                                "Fail retrieving Chat Messages" + arg0.getCause().toString(),                                Toast.LENGTH_LONG).show();                        Log.e("failure retrieving Msg", arg0.getCause().toString());                    } else {                        Toast.makeText(context,                                "Fail retrieving Chat Messages no Cause" + arg0.toString(),                                Toast.LENGTH_LONG).show();                        Log.e("failure retrieving Msg", arg0.toString());                    }                }                @Override                public void success(WSInfo<MessageToSubject> result, Response arg1) {                    Log.d("success retrieving Msg", result.toString());                    setMessages(result.getResults());                }            });        }    }}